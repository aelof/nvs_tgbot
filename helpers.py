from enum import Enum
import sqlite3

# db file to class States
db_file = "database.vdb"


conn = sqlite3.connect('Users.db', check_same_thread=False)
# for output in list format instead tuple
conn.row_factory = lambda cursor, row: row[0]
cursor = conn.cursor()


def db_insert_user_info(name, user_id, firstname, username, reg_date):
    cursor.execute('INSERT INTO Users (name, user_id, firstname, username, reg_date) VALUES (?, ?, ?, ?, ?)',
                   (name, user_id, firstname, username, reg_date))
    conn.commit()


def get_ids():
    cursor.execute('select user_id  from Users')
    return cursor.fetchall()


def db_get_link(where, what, how):
    conn = sqlite3.connect('links.db', check_same_thread=False)
    cursor = conn.cursor()
    try:
        cursor.execute(
            'SELECT –°—Å—ã–ª–∫–∞ FROM Sheet1 WHERE –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è=? AND –ö–∞—Ç–µ–≥–æ—Ä–∏—è=?  AND –ë—é–¥–∂–µ—Ç=?', (where, what, how))
        return cursor.fetchone()
    except:
        return False


def db_insert_phone(id, phone):
    cursor.execute(
        f'UPDATE Users SET phone = ? WHERE user_id = ? ', (phone, id))
    conn.commit()


def exist_phone(id):
    cursor.execute('SELECT phone FROM Users WHERE user_id=?', (id,))
    if cursor.fetchone():
        return True
    else:
        return False


def get_phone(id):
    '''
    Just get phone from DB
    '''
    cursor.execute('SELECT phone FROM Users WHERE user_id=?', (id,))
    return cursor.fetchone()


def exist_name(user_id):
    '''
    Check if name already in DB
    '''
    cursor.execute('SELECT name FROM Users WHERE user_id=?', (id,))
    if cursor.fetchone():
        return True
    else:
        return False


def get_name(id):
    '''
    Just get name from DB
    '''
    cursor.execute('SELECT name FROM Users WHERE user_id=?', (id,))
    return cursor.fetchone()


class User:
    name = None

    @property
    def from_db_name(user_id):
        pass


class States(Enum):

    NAME = '0'
    MENU = '1'
    GEO = '2'
    CAT = '3'
    KUSH = '4'
    PHONE = '5'
    ORDER_CALL = '6'


class Target:
    QUERY = []

    def add_to_query(query):
        Target.QUERY.append(query)

    def show_query():
        return Target.QUERY

    def clear_query():
        Target.QUERY.clear()


hello = '''üôã‚Äç‚ôÇÔ∏è 
–Ø - –í–ª–∞–¥–∏–º–∏—Ä, –í–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ù–û–í–û–°–¢–†–û–ô!

–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –ø–æ–º–æ–≥ –í–∞–º –≤—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ 
'''

help = ''' –í –æ—Å–Ω–æ–≤–Ω–æ–º –≤—Å—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –±–æ—Ç–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n 
–í–æ –∏–∑–±–∏–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –∏–ª–∏ —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —ç—Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –º–µ–Ω—é 
\n–ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @alexpure
'''

contacts = '''–û—Ñ–∏—Å –≤ –ì–µ–ª–µ–Ω–¥–∂–∏–∫–µ  - \n
–û—Ñ–∏—Å –≤ –ê–¥—ã–≥–µ–µ - \n
–û—Ñ–∏—Å –≤ –ê–Ω–∞–ø–µ -  \n
'''


category_list = ['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ó–µ–º–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏', '–î–æ–º–∞', ]
menu_list = ['–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫', '–ü–æ–º–æ—â—å', '–í–∏–¥–µ–æ –æ–±–∑–æ—Ä—ã']
back_list = ['‚Ü© –ù–∞–∑–∞–¥', '√ó –û—Ç–º–µ–Ω–∞', '‚Ü© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
kush_list = ['–¥–æ 1 –º–ª–Ω', '1 - 3 –º–ª–Ω', '3+ –º–ª–Ω',
             '5 - 7 –º–ª–Ω', '7 - 10 –º–ª–Ω', '10+ –º–ª–Ω']
teh_channel = -1001511156970
