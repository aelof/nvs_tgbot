import telebot
from config import TOKEN
import dbworker
import logging, os 
from datetime import datetime
from helpers import States, Target, User, db_insert_user_request, exist_name, exist_request, get_name, sql_to_csv, admin_help
from helpers import exist_phone, db_insert_user_info, get_ids, db_get_link, db_insert_phone, get_phone
from helpers import hello, help, contacts, category_list, menu_list, back_list, kush_list, teh_channel
from keyboards import (general_markup, geo_markup, kush_markup,
                       kush_house_markup, menu_markup, phone_markup,
                       hide_markup, yt_markup, order_call_kb)


logger = telebot.logger
telebot.logger.setLevel(logging.INFO)
# telebot.logger.setLevel(logging.DEBUG)


bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

# handler for test


@bot.message_handler(commands=['test'])
def cmd_start(msg):
    if msg.from_user.id == 239090651:
        bot.send_message(teh_channel, f'{msg.chat.id}, {msg.from_user.id}')


# first touch with user
@bot.message_handler(commands=['start'])
def first_message(msg):
    Target.clear_query()
    id = msg.from_user.id
    if get_name(id):
        bot.send_message(id,
                         f'–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {get_name(id)}! \n–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –í–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=menu_markup)
    else:
        bot.send_message(
            msg.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ{hello}', reply_markup=hide_markup)
        bot.send_message(msg.chat.id, '–ê –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç ? ')
        bot.send_message(msg.chat.id,
                         '<i>–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π <b>—É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏</b></i>')
        dbworker.set_state(msg.chat.id, States.NAME.value)


# after enter name
@bot.message_handler(func=lambda msg: dbworker.get_current_state(msg.chat.id) == States.NAME.value)
def entering_kush(msg):
    bot.send_message(msg.chat.id, f'–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {msg.text}!')
    bot.send_message(msg.chat.id,
                     f'–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –í–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
                     '\n–ï—Å–ª–∏ –í–∞–º —Ä–∞–Ω–µ–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å —á–∞—Ç-–±–æ—Ç–∞–º–∏, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–º–æ—â—å" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ',
                      reply_markup=menu_markup)

    dbworker.set_state(msg.from_user.id, States.MENU.value)

    name = msg.text
    user_id = msg.from_user.id
    user_firstname = msg.from_user.first_name
    user_username = msg.from_user.username
    user_date = datetime.utcfromtimestamp(msg.date).strftime('%y-%m-%d')
    db_insert_user_info(name=name,
                        user_id=user_id,
                        firstname=user_firstname,
                        username=user_username,
                        reg_date=user_date)


# handler for custom commands
@bot.message_handler(commands=['admin', 'exportdb', 'sendtoall'])
def admin_message(msg):
    if msg.text == '/admin':
        bot.send_message(msg.chat.id, admin_help)
    if msg.text == '/sendtoall':
        bot.send_message(msg.chat.id, '—ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â—ë –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è')
    if msg.text == '/exportdb':
        if sql_to_csv():
            path_to_db = os.getcwd() + '/Users.csv'
            f = open(path_to_db,"rb")
            bot.send_document(msg.chat.id, document=f)
        else: 
            bot.send_message(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @alexpure')


# def send_to_all(msg):
#     for chat_id in get_ids():
#         try:
#             bot.send_message(chat_id, msg.text)
#         except Exception as e:
#             bot.send_message(
#                 msg.chat.id, f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')


@bot.message_handler(func=lambda msg: msg.text in menu_list)
def search_obj(msg):
    if msg.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã':
        bot.send_message(
            msg.chat.id, contacts) 
    elif msg.text == '–ü–æ–º–æ—â—å':
        bot.send_message(
            msg.chat.id, help)
    elif msg.text == '–í–∏–¥–µ–æ –æ–±–∑–æ—Ä—ã':
        bot.send_message(
            msg.chat.id, '–í–æ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ', reply_markup=yt_markup)
    elif msg.text == '–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫':
        if exist_phone(msg.chat.id):
            bot.send_message(msg.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã?',
                             reply_markup=order_call_kb)
            dbworker.set_state(msg.chat.id, States.ORDER_CALL.value)
        else:
            bot.send_message(
                msg.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=phone_markup)


# return to main menu or cancel to share phone number
@bot.message_handler(func=lambda msg: msg.text in back_list)
def back(msg):
    if msg.text == '‚Ü© –ù–∞–∑–∞–¥':
        bot.send_message(msg.chat.id,
                         "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞", reply_markup=geo_markup)
        dbworker.set_state(msg.chat.id, States.GEO.value)
        Target.clear_query()
    elif msg.text == '‚Ü© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(msg.chat.id,
                         "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_markup)
        # dbworker.set_state(msg.chat.id, States.CAT.value)
    else:
        bot.send_message(
            msg.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_markup)


@bot.message_handler(func=lambda msg: msg.text == '–ù–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç')
def search_obj(msg):
    bot.send_message(msg.chat.id,
                     '–•–æ—Ä–æ—à–æ üëå\n—Å–µ–π—á–∞—Å —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –í–∞–º –æ–±—ä–µ–∫—Ç\
                            \n–≤—ã–±–µ—Ä–µ—Ç–µ –ª–æ–∫–∞—Ü–∏—é:',
                     reply_markup=geo_markup)
    dbworker.set_state(msg.chat.id, States.GEO.value)


@bot.message_handler(func=lambda msg: dbworker.get_current_state(msg.chat.id) == States.GEO.value)
def entering_kush(msg):
    if msg.text in ['–ì–µ–ª–µ–Ω–¥–∂–∏–∫', '–ê–Ω–∞–ø–∞', '–õ–∞–≥–æ-–ù–∞–∫–∏']:
        Target.add_to_query(msg.text)
        bot.send_message(msg.chat.id,
                         "–° –ª–æ–∫–∞—Ü–∏–µ–π –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=general_markup)
        dbworker.set_state(msg.chat.id, States.CAT.value)
    else:
        bot.send_message(msg.chat.id,
                         "–í—ã–±–µ—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ")


@bot.message_handler(func=lambda msg: dbworker.get_current_state(msg.chat.id) == States.CAT.value)
def investment(msg):
    Target.add_to_query(msg.text)
    if msg.text in category_list:
        if Target.show_query()[1] == '–î–æ–º–∞':
            bot.send_message(msg.chat.id,
                             '–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –±—é–¥–∂–µ—Ç', reply_markup=kush_house_markup)
        else:
            bot.send_message(msg.chat.id,
                             '–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –±—é–¥–∂–µ—Ç', reply_markup=kush_markup)
        dbworker.set_state(msg.chat.id, States.KUSH.value)
    else:
        bot.send_message(msg.chat.id, '–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Ç–∞–∫–æ–≥–æ –Ω–µ –±—ã–ª–æ!')


@bot.message_handler(func=lambda msg: dbworker.get_current_state(msg.chat.id) == States.KUSH.value)
def before_final(msg):
    if msg.text in kush_list:
        Target.add_to_query(msg.text)
        if exist_phone(msg.chat.id):
            bot.send_message(msg.chat.id, db_get_link(*Target.show_query()))
            bot.send_message(
                msg.chat.id, f'{get_name(msg.chat.id)}, ‚òùÔ∏è –≤–æ—Ç –≤–∞—à–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞')
            bot.send_message(msg.chat.id,
                             '<i>–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –í—ã –ø–µ—Ä–µ–Ω–µ–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>',
                             reply_markup=menu_markup, disable_notification=True)
            if exist_request(msg.chat.id):
                pass
            else:
                db_insert_user_request(msg.chat.id, str(Target.show_query()) )
            Target.clear_query()

        else:
            bot.send_message(
                msg.chat.id, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=phone_markup)
            dbworker.set_state(msg.chat.id, States.PHONE.value)


@bot.message_handler(func=lambda msg: dbworker.get_current_state(msg.chat.id) == States.ORDER_CALL.value)
def order_call(msg):
    if msg.text == "–î–∞, –∑–∞–∫–∞–∑–∞—Ç—å":
        bot.send_message(
            msg.chat.id, f'–•–æ—Ä—à–æ, {get_name(msg.chat.id)} c–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')
        bot.send_message(msg.chat.id, '<i>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>',
                         reply_markup=menu_markup, disable_notification=True)
        bot.send_message(
            teh_channel, f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞:\n{get_phone(msg.chat.id)}')


@bot.message_handler(content_types=['contact'])
def handle_contact(msg):
    phone = msg.contact.phone_number
    if dbworker.get_current_state(msg.from_user.id) == States.PHONE.value:
        phone = msg.contact.phone_number
        bot.send_message(msg.chat.id, db_get_link(*Target.show_query()))
        bot.send_message(
            msg.chat.id, f'{get_name(msg.chat.id)}, ‚òùÔ∏è –≤–æ—Ç –≤–∞—à–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞')
        bot.send_message(msg.chat.id,
                         '<i>–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –í—ã –ø–µ—Ä–µ–Ω–µ–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>',
                         reply_markup=menu_markup,  disable_notification=True)
        if exist_request(msg.chat.id):
            pass
        else:
            db_insert_user_request(msg.chat.id, str(Target.show_query()) )
        Target.clear_query()

    else:
        bot.send_message(msg.chat.id,
                         '–û–ø–µ—Ä–∞—Ç–æ—Ä —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ !')
        bot.send_message(
            teh_channel, f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞:\n{phone}')
        bot.send_message(msg.chat.id, '<i>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>',
                         reply_markup=menu_markup, disable_notification=True)

    if exist_phone(msg.from_user.id):
        pass
    else:
        db_insert_phone(msg.from_user.id, phone)


@bot.message_handler(content_types=['text'])
def investment(msg):    msg = bot.send_message(msg.chat.id,
                           '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π  /start',
                           reply_markup=general_markup)


bot.infinity_polling(timeout=18, skip_pending=True)
