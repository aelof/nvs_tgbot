import telebot
from config import TOKEN
from keyboards import (general_markup, geo_markup, kush_markup,
                       kush_house_markup, menu_markup, phone_markup)
from helpers import hello
import dbworker
from helpers import States, Target
from helpers import add_to_db, get_ids

# You can set parse_mode by default. HTML or MARKDOWN
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

category_list = ['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ó–µ–º–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏', '–î–æ–º–∞', '–í–∏–¥–µ–æ –æ–±–∑–æ—Ä—ã']
menu_list = ['–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫', '–ü–æ–º–æ—â—å']
back_list = ['‚Ü© –ù–∞–∑–∞–¥', '√ó –û—Ç–º–µ–Ω–∞']

# handler for test
@bot.message_handler(commands=['test'])
def cmd_start(msg):
    bot.send_message(msg.chat.id, f'{msg.chat.id}, {msg.from_user.id}')


@bot.message_handler(commands=['start', 'sendtoall'])
def cmd_start(msg):
    if msg.text == '/sendtoall':
        target_msg = bot.send_message(msg.chat.id, ' –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –¥—Ä—É–≥–∏–º:')
        bot.register_next_step_handler(target_msg, send_to_all)
    else:    
        bot.send_message(
        msg.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {msg.from_user.first_name} {hello}', reply_markup=menu_markup)
        us_id = msg.from_user.id
        us_firstname = msg.from_user.first_name
        us_username = msg.from_user.username
        us_date = msg.date
        add_to_db(user_id=us_id, firstname = us_firstname, username=us_username, date=us_date)
    

def send_to_all(msg):
    for chat_id in get_ids():
        try:
            bot.send_message(chat_id, msg.text )
        except Exception as e:
            bot.send_message(msg.chat.id, f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')



@bot.message_handler(func=lambda msg: msg.text in menu_list)
def search_obj(msg):
    if msg.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã':
        bot.send_message(msg.chat.id, '–û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤')
    elif msg.text == '–ü–æ–º–æ—â—å':
        bot.send_message(msg.chat.id, '–û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–æ–∫–∞ c –ø–æ–º–æ—â—å—é')
    elif msg.text == '–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫':
        bot.send_message(
            msg.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=phone_markup)


# return to main menu or cancel to share phone number
@bot.message_handler(func=lambda msg: msg.text in back_list)
def back(msg):
    if msg.text == '‚Ü© –ù–∞–∑–∞–¥':
        bot.send_message(
            msg.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞", reply_markup=general_markup)
        dbworker.set_state(msg.chat.id, States.ENTER_CAT.value)
    else:
        bot.send_message(
            msg.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_markup)


@bot.message_handler(func=lambda msg: msg.text == '–ù–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç')
def search_obj(msg):
    bot.send_message(msg.chat.id,
                     '–•–æ—Ä–æ—à–æ üëå\n—Å–µ–π—á–∞—Å —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –í–∞–º –æ–±—ä–µ–∫—Ç\
                            \n–≤—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
                     reply_markup=general_markup)
    dbworker.set_state(msg.chat.id, States.ENTER_CAT.value)


@bot.message_handler(func=lambda msg: dbworker.get_current_state(msg.chat.id) == States.ENTER_CAT.value)
def investment(msg):
    chat_id = msg.chat.id
    bot.send_message(chat_id,
                     '–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –≥–æ—Ä–æ–¥:', reply_markup=geo_markup)
    dbworker.set_state(msg.chat.id, States.ENTER_GEO.value)
    Target.add_to_query(msg.text)


@bot.message_handler(func=lambda msg: dbworker.get_current_state(msg.chat.id) == States.ENTER_GEO.value)
def entering_kush(msg):
    if msg.text in ['–ì–µ–ª–µ–Ω–¥–∂–∏–∫', '–ê–Ω–∞–ø–∞', '–õ–∞–≥–æ-–ù–∞–∫–∏']:
        Target.add_to_query(msg.text)
        if Target.show_query()[0] == '–î–æ–º–∞':
            bot.send_message(
                msg.chat.id, "–•–æ—Ä–æ—à–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –±—é–¥–∂–µ—Ç!", reply_markup=kush_house_markup)
        else:
            bot.send_message(
                msg.chat.id, "–•–æ—Ä–æ—à–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –±—é–¥–∂–µ—Ç!", reply_markup=kush_markup)
        dbworker.set_state(msg.chat.id, States.ENTER_KUSH.value)


@bot.message_handler(func=lambda msg: dbworker.get_current_state(msg.chat.id) == States.ENTER_KUSH.value)
def final(msg):
    Target.add_to_query(msg.text)
    bot.send_message(msg.chat.id, '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –∏–∑ –¶–†–ú –ø–æ –∑–∞–ø—Ä–æ—Å—É:')
    bot.send_message(msg.chat.id, str(Target.show_query()))
    Target.clear_query()
    bot.send_message(
        msg.chat.id, '<i>–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –í—ã –ø–µ—Ä–µ–Ω–µ–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>', reply_markup=menu_markup)


@bot.message_handler(content_types=['text'])
def investment(msg):
    chat_id = msg.chat.id
    msg = bot.send_message(chat_id,
                           '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ',
                           reply_markup=general_markup)


@bot.message_handler(content_types=['contact'])
def investment(msg):
    number = msg.contact.phone_number
    bot.send_message(
        msg.chat.id, f'–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É  {msg.from_user.first_name} {number}')
    bot.send_message(msg.chat.id, '<i>–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>',
                     reply_markup=menu_markup)





bot.infinity_polling(interval=0, timeout=20)
