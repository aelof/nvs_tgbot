import telebot
from config import TOKEN
from keyboards import (general_markup, geo_markup, kush_markup,
                       kush_house_markup, menu_markup)
from helpers import hello, State, category_list

bot = telebot.TeleBot(TOKEN,
                      parse_mode='HTML')  # You can set parse_mode by default. HTML or MARKDOWN


@bot.message_handler(commands=['start', 'sendtoall'])
def send_welcome(message):
    chat_id = message.chat.id
    name = message.from_user.first_name
    if message.text == '/start':
        bot.send_message(chat_id,
                         '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ' + str(name) + hello,
                         reply_markup=menu_markup)
    elif message.text == '/sendtoall':
        msg = bot.send_message(chat_id,
                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –¥—Ä—É–≥–∏–º')
        bot.register_next_step_handler(msg, sendtoall)

def sendtoall(message):
    try:
        chat_id = message.chat.id
        bot.send_message(chat_id,
                         '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞')
    except Exception as e:
        bot.send_message(chat_id,
                         '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ',
                         reply_markup=general_markup)

@bot.message_handler(func=lambda query: query.text == '–ù–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç')
def search_obj(message):
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     '–•–æ—Ä–æ—à–æ üëå\n—Å–µ–π—á–∞—Å —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –í–∞–º –æ–±—ä–µ–∫—Ç\
                            \n–≤—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
                     reply_markup=general_markup)


@bot.message_handler(func=lambda query: query.text in category_list)
def investment(message):
    State.category = message.text
    chat_id = message.chat.id
    msg = bot.send_message(chat_id,
                           '–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –≥–æ—Ä–æ–¥:',
                           reply_markup=geo_markup)
    bot.register_next_step_handler(msg, choice_geo)


def choice_geo(message):
        chat_id = message.chat.id
        text = message.text
        State.geo = text
        if text in ['–ì–µ–ª–µ–Ω–¥–∂–∏–∫', '–ê–Ω–∞–ø–∞', '–õ–∞–≥–æ-–ù–∞–∫–∏']:
            msg = bot.send_message(chat_id,
                                   '–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –±—é–¥–∂–µ—Ç:',
                                   reply_markup=kush_house_markup)
            bot.register_next_step_handler(msg, choice_kush)


def choice_kush(message):
    try:
        chat_id = message.chat.id
        text = message.text
        State.kush = text
        if text in ['5 - 7 –º–ª–Ω', '7 - 10 –º–ª–Ω', '10+ –º–ª–Ω']:
            bot.send_message(
                chat_id,
                f'{State.category}{State.geo}{State.kush}')
            bot.send_message(
                chat_id,
                '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –∏–∑ –¶–†–ú –ø–æ –¥–æ–º–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –≥–æ—Ä–æ–¥—É –∏ –±—é–¥–∂–µ—Ç—É',
                reply_markup=general_markup)

    except Exception as e:
        bot.send_message(chat_id,
                         '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ',
                         reply_markup=general_markup)


@bot.message_handler(content_types=['text'])
def investment(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id,
                           '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ',
                           reply_markup=general_markup)


bot.infinity_polling(interval=0, timeout=20)
